#! /usr/bin/bash

set -e
trap "echo $(date) backup interrupted >&2; exit 2" INT TERM
cd "${HOME}"

# --debug|-d option for debugging
while :; do
    case $1 in
        -d|--debug) debug=true                     
        ;;
        *) break
    esac
    shift
done

if [ "${debug}"  = true ]
then
    borg () { echo borg "$@"; }
    rclone () { echo rclone "$@"; }
fi



# Backup local location
BORG_REPO_LOCATION="$HOME/.backup"



# Directories and files to be backed up
if [ -n "$XDG_CONFIG_HOME" ]; then
    CONFIG_DIR="$XDG_CONFIG_HOME/backup"
else
    CONFIG_DIR="${HOME}/.config/backup"
fi

BORG_FILES=$(perl - <<'__HERE__'
use warnings;
use Cwd;
use File::Globstar qw(globstar); 

chdir("$ENV{HOME}");

my @backup_files;

open(my $line, "<","$ENV{HOME}/.config/backup/backuprc");
while (my $l = <$line> ) {
    chomp $l;
    if (index($l,'*') != -1) {
        push(@backup_files, globstar($l));
    } elsif ($l =~ / /) {
        push(@backup_files,"'$l'")
    } else {
        push(@backup_files, "$l\n");
    }
}
@backup_files = grep(s/\s*$//g, @backup_files);
map { s/(^.*\s.*$)/'$1'/g; } @backup_files;
print "@backup_files\n";
__HERE__
)
BORG_FILES=$(echo $BORG_FILES | sed "s/''//g")

# BORG_FILES=()
# while read -r file; do
#     BORG_FILES+=( $"$file")
# done <<< $(cat $CONFIG_DIR/backuprc | sed 's/[[:space:]]*$//')


# Backups name pattern
BORG_BACKUP_NAME="$(whoami)@$(hostname)-$(date +%F)"



# All rclone remote backends
RCLONE_BACKENDS="$(rclone config show | grep -E "^\[.+\]" | tr -d '[]')"



echo "=> Starting backup"
BORG_EXEC=$(cat << EOF
            BORG_UNKNOWN_UNENCRYPTED_BORG_REPO_NAME_ACCESS_IS_OK=yes borg create --stats \
            --show-rc \
            --compression lz4 \
            ${BORG_REPO_LOCATION}::${BORG_BACKUP_NAME} ${BORG_FILES[@]}
EOF
)
eval "$BORG_EXEC"
echo

echo "=> Pruning repository"
borg prune --prefix "$(whoami)@$(hostname)-" \
            --keep-weekly 3 \
            --keep-monthly 6 \
            "${BORG_REPO_LOCATION}"
echo

while read -r backend; do
    echo "=> Uploading to ${backend}"
    rclone sync ${BORG_REPO_LOCATION} "${backend}":backup/
    echo
done <<< "${RCLONE_BACKENDS}"

echo "Backup done."
